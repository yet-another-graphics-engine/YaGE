cmake_minimum_required(VERSION 2.6)

configure_file (
  "${PROJECT_SOURCE_DIR}/src/version.cc.in"
  "${PROJECT_BINARY_DIR}/src/version.cc"
)

# set compiler warning to max
if(MSVC)
    add_definitions(/W3 /wd4819) # disable warning generated by giving non-ANSI gtk header
else()
    add_definitions(-Wall)

    # Uncomment the following lines to enable gprof support in debug build
    # set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -pg")
    # set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -pg")
endif()

# silence warning under Clang
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    add_definitions(-Wno-deprecated-register)
    if(WIN32)
        add_definitions(-Wno-incompatible-ms-struct)
    endif()
endif()

# specify output path
# from http://stackoverflow.com/a/6595001
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set(LIB_SOURCE_FILES
    ${CMAKE_BINARY_DIR}/src/version.cc
    main.cc
    util/encoding.cc
    window/message.cc
    window/window.cc
    window/timer.cc
    util/runner.cc
    audio/player.cc
    dialog/message_dlg.cc
    dialog/file_chooser_dlg.cc
    dialog/color_chooser_dlg.cc
    dialog/font_chooser_dlg.cc
    dialog/input_dlg.cc
    draw/animation.cc
    draw/point.cc
    draw/color.cc
    draw/canvas.cc
    draw/font.cc
    draw/text.cc
    draw/paint.cc
    draw/linear_gradient_color.cc
    api/bgi.cc
    api/yage.cc
    api/yage_button.cc
    )

# Win32 GTK theme
if(WIN32)
    add_subdirectory(res)
    list(APPEND LIB_SOURCE_FILES res/yage_theme.cc)
    INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/res/)
endif()

# Audio support files
if(WIN32)
    list(APPEND LIB_SOURCE_FILES audio/mswin.cc)
elseif(APPLE)
    list(APPEND LIB_SOURCE_FILES audio/osx.mm)
elseif(UNIX)
    list(APPEND LIB_SOURCE_FILES audio/unix.cc)
endif()

# Audio support libraries
if(APPLE)
    find_library(FOUNDATION_LIBRARY Foundation)
    find_library(AVFOUNDATION_LIBRARY AVFoundation)
    find_library(COREMEDIA_LIBRARY CoreMedia)
    set_source_files_properties(${LIB_SOURCE_FILES} PROPERTIES COMPILE_FLAGS "-x objective-c++")
elseif(UNIX)
    FIND_PACKAGE(PkgConfig REQUIRED)
    PKG_CHECK_MODULES(GSTREAMER REQUIRED gstreamer-0.10)
    INCLUDE_DIRECTORIES(${GSTREAMER_INCLUDE_DIRS})
    ADD_DEFINITIONS(${GSTREAMER_CFLAGS_OTHER})
endif()

if (MSVC)
    add_library(yage STATIC ${LIB_SOURCE_FILES})
    list(REMOVE_ITEM CMAKE_CXX_FLAGS_DEBUG /Zi)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Z7")
    if (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER 14 AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 15) # Visual C++ 2005
        set_target_properties(yage PROPERTIES OUTPUT_NAME_DEBUG yagevc8d)
        set_target_properties(yage PROPERTIES OUTPUT_NAME_RELEASE yagevc8)
    elseif (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER 15 AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 16) # Visual C++ 2008
        set_target_properties(yage PROPERTIES OUTPUT_NAME_DEBUG yagevc9d)
        set_target_properties(yage PROPERTIES OUTPUT_NAME_RELEASE yagevc9)
    elseif (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER 16 AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 17) # Visual C++ 2010
        set_target_properties(yage PROPERTIES OUTPUT_NAME_DEBUG yagevc10d)
        set_target_properties(yage PROPERTIES OUTPUT_NAME_RELEASE yagevc10)
    elseif (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER 17 AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 18) # Visual C++ 2012
        set_target_properties(yage PROPERTIES OUTPUT_NAME_DEBUG yagevc11d)
        set_target_properties(yage PROPERTIES OUTPUT_NAME_RELEASE yagevc11)
    elseif (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER 18 AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 19) # Visual C++ 2013
        set_target_properties(yage PROPERTIES OUTPUT_NAME_DEBUG yagevc12d)
        set_target_properties(yage PROPERTIES OUTPUT_NAME_RELEASE yagevc12)
    elseif (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER 19 AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 19.1) # Visual C++ 2015
        set_target_properties(yage PROPERTIES OUTPUT_NAME_DEBUG yagevc14d)
        set_target_properties(yage PROPERTIES OUTPUT_NAME_RELEASE yagevc14)
elseif (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER 19.1 AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 21) # Visual C++ 2017

        set_target_properties(yage PROPERTIES OUTPUT_NAME_DEBUG yagevc15d)
        set_target_properties(yage PROPERTIES OUTPUT_NAME_RELEASE yagevc15)
    endif()
    LINK_DIRECTORIES(${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})
endif()

if(MINGW)
    set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++ ${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS "-static-libgcc -static-libstdc++ -Wl,--exclude-libs,libgcc_eh.a ${CMAKE_SHARED_LINKER_FLAGS}")
    list(APPEND LIB_SOURCE_FILES util/snprintf.c) # Used to replace default poisonous MSVCRT-provided `vsnprintf`
endif()

# Add GTK dependency
# CMake x GTK from https://gist.github.com/fracek/3323924
# Use the package PkgConfig to detect GTK+ headers/library files
FIND_PACKAGE(PkgConfig REQUIRED)
PKG_CHECK_MODULES(GTK3 REQUIRED gtk+-3.0)

# Setup CMake to use GTK+, tell the compiler where to look for headers
# and to the linker where to look for libraries
INCLUDE_DIRECTORIES(${GTK3_INCLUDE_DIRS})
LINK_DIRECTORIES(${GTK3_LIBRARY_DIRS})

# Add other flags to the compiler
if (MSVC)
    # pkg-config generates a flag that is not applicable on MSVC: -mms-bitfields
else()
    ADD_DEFINITIONS(${GTK3_CFLAGS_OTHER})
    add_library(yage SHARED ${LIB_SOURCE_FILES})
endif()

# install library and headers
if (NOT WIN32)
    include(GNUInstallDirs)
    install(TARGETS yage DESTINATION ${CMAKE_INSTALL_LIBDIR})
    install(DIRECTORY "../include/" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
endif()

set(YAGE_TEST_SOURCE_FILES
    test/test.cc
    test/audio.cc
    test/dialog.cc
    test/draw_perf.cc
    test/draw_shape.cc
    test/draw_pic.cc
    test/draw_anim.cc
    test/window_count.cc
    test/window_fix_size.cc
    test/window_msg.cc
    test/window_resize.cc
    test/api_yage.cc
    test/api_bgi.cc
    test/api_yage_perf.cc
    test/timer.cc
    test/api_yage_test_c_compiler.c
    test/api_yage_canvas_cut.cc
    )

# Add YaGE test resource files
if(WIN32)
    if(MINGW)
        set(CMAKE_RC_COMPILER_INIT windres)
        enable_language(RC)
        set(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> -O coff -i <SOURCE> -o <OBJECT>")
    endif()
    list(APPEND YAGE_TEST_SOURCE_FILES res/resources.rc)
endif()

add_executable(yagetest ${YAGE_TEST_SOURCE_FILES})

if (MSVC)
    add_dependencies(yagetest yage)
else()
    target_link_libraries(yagetest yage)
endif()

# Audio libraries
if (APPLE)
    target_link_libraries(yage ${FOUNDATION_LIBRARY} ${AVFOUNDATION_LIBRARY} ${COREMEDIA_LIBRARY})
elseif(UNIX)
    target_link_libraries(yage ${GSTREAMER_LIBRARIES})
endif()

# GTK libraries
if (MSVC) # library required by MSVC is pretty different than others; Update: GTK libraries are automatically linked via pragma in header. It is reserved for historical and debugging purpose.
    # target_link_libraries(yagetest "atk-1.0.lib" "cairo.lib" "fontconfig.lib" "gailutil.lib" "gdk-win32-3.0.lib" "gdk_pixbuf-2.0.lib" "gio-2.0.lib" "glib-2.0.lib" "gmodule-2.0.lib" "gobject-2.0.lib" "gthread-2.0.lib" "gtk-win32-3.0.lib" "pango-1.0.lib" "pangocairo-1.0.lib" "pangoft2-1.0.lib" "pangowin32-1.0.lib")
else()
    target_link_libraries(yage ${GTK3_LIBRARIES})
endif()

# Packing for Linux
if (APPLE)
elseif (UNIX)
    set(CPACK_PACKAGE_NAME "yage")
    set(CPACK_GENERATOR "DEB;RPM")
    set(CPACK_DEBIAN_PACKAGE_VERSION "@VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@+git@VERSION_TWEAK@")
    set(CPACK_RPM_PACKAGE_VERSION "@VERSION_MAJOR@.@VERSION_MINOR@.@VERSION_PATCH@.@VERSION_TWEAK@git")
    set(CPACK_PACKAGE_CONTACT "Xiaodong Qi <qxd@bupt.edu.cn>")
    set(CPACK_PACKAGE_VENDOR "YaGE Developers")
    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Yet another Graphics Engine")
    set(CPACK_PACKAGE_DESCRIPTION "A graphical library based on Cairo / GTK+, with support of music playing, etc.")
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "libgtk-3-0, libgstreamer0.10-0")
    set(CPACK_RPM_PACKAGE_LICENSE "LGPLv3+")
    set(CPACK_RPM_PACKAGE_REQUIRES "gtk3, gstreamer")
    set(CPACK_RPM_PACKAGE_GROUP "Development/Libraries")
    set(CPACK_RPM_SPEC_MORE_DEFINE "%define ignore \#")
    set(CPACK_RPM_USER_FILELIST "%ignore /usr" "%ignore /usr/lib" "%ignore /usr/lib64")
    include(CPack)
endif()
